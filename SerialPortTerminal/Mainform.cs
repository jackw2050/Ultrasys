using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.IO.Ports;
using System.Windows.Forms;

namespace WindowsFormsApplication1
{



   

    public partial class Form1 : Form
    {
        private string RxString;
        
        private CalculateMarineData Newdata = new CalculateMarineData();




        public Form1()
        {
            InitializeComponent();
            textBox1.Text = "Date /Time                           Spring Tension             Raw Beam";
  
        }

        private void Form1_Load(object sender, EventArgs e)
        {
             

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (serialPort1.IsOpen) serialPort1.Close();
        }

        private void pToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void switchesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Switches frm = new Switches();
            frm.Show();
        }

        private void proceduresToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AdtlProcedures frm = new AdtlProcedures();
            frm.Show();
        }

        private void longAxisParametersToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LongAxis frm = new LongAxis();
            frm.Show();
        }

        private void StartCommbutton_Click(object sender, EventArgs e)
        {

            CommForm frm = new CommForm();
            frm.Show();



        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            // If the port is closed, don't try to send a character.

            if (!serialPort1.IsOpen) return;

            // If the port is Open, declare a char[] array with one element.
            char[] buff = new char[1];

            // Load element 0 with the key character.

            buff[0] = e.KeyChar;

            // Send the one character buffer.
            serialPort1.Write(buff, 0, 1);

            // Set the KeyPress event as handled so the character won't
            // display locally. If you want it to display, omit the next line.
            e.Handled = true;
        }

        private void serialPort1_DataReceived
          (object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            RxString = serialPort1.ReadExisting();
            //    this.Invoke(new EventHandler(DisplayText));
        }

        private void crossAxisParametersToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CrossAxisForm frm = new CrossAxisForm();
            frm.Show();
        }

        private void commSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CommForm frm = new CommForm();
            frm.Show();
        }

        private void button1_Click(object sender, EventArgs e)
        {



            








            byte[] meterData = new byte[] { 0x4E, 0x00, 0xDF, 0x7, 0x1F, 0x01, 0x14, 0x2B, 0x2F, 0x24, 0x3E, 0x9D, 0x45, 0xA8, 0xBA, 0xB9, 0xC4, 0x7C, 0xBA, 0x83, 0xC1, 0xF6, 0x7C, 0x2F, 0xBE, 0x72, 0x68, 0x54, 0xBD, 0x7E, 0x29, 0x1C, 0x3D, 0xC2, 0x69, 0x5A, 0xB8, 0xBC, 0xF4, 0xB9, 0x3D, 0x7E, 0xA6, 0x9F, 0x3E, 0x9B, 0xD1, 0xCF, 0xBE, 0x54, 0xE1, 0xAB, 0x41, 0xF9, 0xFE, 0xC6, 0xFE, 0x2F, 0xFF, 0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xB7, 0xB1, 0x48, 0x3D, 0x96, 0x91, 0xBF, 0x69, 0x40, 0x58, 0xBE, 0x00, 0xFF, 0x2B };
            byte[] meterCRC;
            meterCRC = meterData;
            meterCRC[78] = 0;
            byte sum = 0;
            unchecked
            {
                foreach(byte b in meterCRC)
                {
                    sum += b;
                }
            }

            textBox2.Text = Convert.ToString(sum);
            textBox10.Text = Convert.ToString(meterData[78]);
            /*
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x30,0x24,0x3E,0x9D,0x45,0x26,0x5A,0xBB,0xC4,0x31,0x40,0x90,0xC1,0x43,0xD9,0xA9,0xBE,0x0A,0x1F,0x4D,0xBD,0x8F,0x2F,0xF5,0x3D,0x41,0x17,0x32,0xB9,0xA1,0x67,0xAA,0x3C,0x0D,0xFC,0xBE,0x3E,0x98,0x43,0x8D,0x40,0x74,0xE5,0xBB,0x41,0xC2,0xFE,0xD8,0xFE,0x19,0xFF,0xC2,0xFE,0xFF,0xFF,0xFF,0x98,0xB7,0x35,0x48,0x8,0x96,0x9B,0xBF,0x71,0x40,0x51,0xBE,0x00,0xFF,0x11;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x31,0x24,0x3E,0x9D,0x45,0x10,0x0E,0xBD,0xC4,0x73,0x05,0x92,0xC1,0xF0,0xFF,0x86,0xBE,0x14,0xBE,0x41,0xBD,0x49,0x85,0x98,0x3D,0x7F,0x23,0x61,0xB9,0x63,0x32,0xDA,0x3C,0x30,0x4,0xB8,0x3E,0x8B,0xEA,0x86,0x40,0xED,0x3B,0xB8,0x41,0xE8,0xFE,0xC4,0xFE,0x18,0xFF,0x2F,0xFF,0xFF,0xFF,0xFF,0xB0,0xB7,0x3B,0x48,0x60,0x99,0x7A,0xBF,0x73,0x40,0x5C,0xBE,0x00,0xF7,0x8D;
            0x4E,0x00,0xDF,0x07,0x1F,0x01,0x14,0x2B,0x32,0x24,0x3E,0x9D,0x45,0x71,0xF4,0xBE,0xC4,0x8,0xB1,0x8F,0xC1,0xF4,0x56,0x81,0xBE,0xBF,0x71,0xB0,0xBD,0x40,0x75,0x9B,0x3D,0x8F,0xC0,0x21,0xBA,0x3F,0x4D,0x7F,0x3D,0xEB,0xD0,0xB6,0x3E,0xC4,0x85,0xE4,0x40,0x89,0x25,0xB6,0x41,0xF1,0xFE,0xC2,0xFE,0x10,0xFF,0x3D,0xFF,0xFF,0xFF,0xFF,0x50,0xB8,0xA0,0x48,0x75,0x99,0xB0,0xBF,0x89,0x40,0x72,0xBE,0x00,0xF3,0x9F;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x33,0x24,0x3E,0x9D,0x45,0x92,0xD5,0xC0,0xC4,0x37,0xE4,0x9A,0xC1,0xAF,0x88,0xBE,0xBE,0xEB,0xC3,0x8A,0xBD,0xDF,0xBF,0x0D,0x3E,0xAF,0x8B,0x97,0xB9,0xD5,0xF1,0xA6,0x3C,0x92,0x85,0xD4,0x3E,0xF9,0xE3,0x7E,0x40,0xE2,0x28,0xC3,0x41,0x11,0xFF,0xF0,0xFE,0x40,0xFF,0xC4,0xFE,0xFF,0xFF,0xFF,0x51,0xB8,0xB1,0x48,0x69,0x99,0x91,0xBF,0x99,0x40,0x69,0xBE,0x00,0xF3,0x6A;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x34,0x24,0x3E,0x9D,0x45,0x43,0xAA,0xC2,0xC4,0x85,0x37,0x91,0xC1,0xAC,0x40,0x65,0xBE,0xA2,0x18,0x99,0xBD,0xB1,0xA9,0x71,0x3D,0x9A,0x1C,0x00,0xBA,0x82,0x75,0x2E,0x3D,0x3B,0x12,0xA8,0x3E,0x1C,0x29,0xD0,0x40,0xDC,0xBC,0xAF,0x41,0xC4,0xFE,0x19,0xFF,0xC6,0xFE,0xE6,0xFE,0xFF,0xFF,0xFF,0x1F,0xB9,0xB0,0x47,0x5D,0x96,0x99,0xBF,0xAD,0x40,0x59,0xBE,0x00,0xF9,0xB1;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x35,0x24,0x3E,0x9D,0x45,0x89,0x60,0xC4,0xC4,0x1C,0x73,0x8F,0xC1,0xDC,0x8D,0x8A,0xBE,0x9D,0x91,0xE9,0xBC,0x3B,0x2E,0xB0,0x3D,0xF2,0x47,0xB7,0xB8,0xBC,0x3A,0x79,0x3C,0xD3,0x5C,0xAB,0x3E,0x72,0xD2,0x3A,0x40,0x9E,0xE2,0xB0,0x41,0x39,0xFF,0x8,0xFF,0x27,0xFF,0xF1,0xFE,0xFF,0xFF,0xFF,0x1F,0xB9,0xA9,0x47,0xE2,0x95,0x89,0xBF,0x8C,0x40,0x20,0xBE,0x00,0xF9,0xA3,
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x36,0x24,0x3E,0x9D,0x45,0xD9,0x25,0xC6,0xC4,0x1C,0x1C,0x93,0xC1,0x3F,0x61,0x78,0xBE,0x33,0xD5,0xFE,0xBC,0x58,0x74,0x91,0x3D,0xCA,0x67,0xB8,0xB8,0x9B,0x94,0x20,0x3C,0x0B,0x0E,0xC3,0x3E,0x20,0x38,0x11,0x40,0x89,0x25,0xB6,0x41,0xDA,0xFE,0xF9,0xFE,0xC4,0xFE,0x31,0xFF,0xFF,0xFF,0xFF,0xE9,0xB8,0x6C,0x47,0x49,0x96,0x92,0xBF,0xBF,0x40,0x2D,0xBE,0x00,0xF9,0x32,
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x37,0x24,0x3E,0x9D,0x45,0x23,0x0A,0xC8,0xC4,0xA9,0x89,0x3A,0xC1,0x23,0x4B,0x58,0xBE,0x6,0x23,0xDE,0x3C,0x72,0x72,0xF9,0x3D,0x8E,0x30,0x93,0xB8,0x9B,0x38,0xA8,0x3C,0xE0,0x27,0xE8,0x3D,0xB5,0xCE,0x5C,0xC0,0x2F,0x3C,0x39,0x41,0x4,0xFF,0x3F,0xFF,0x3B,0xFF,0x10,0xFF,0xFF,0xFF,0xFF,0xC2,0xB8,0x4,0x47,0xF1,0x95,0x8A,0xBF,0x9C,0x40,0x74,0xBE,0x00,0xF9,0x65;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x38,0x24,0x3E,0x9D,0x45,0xB1,0xBB,0xC9,0xC4,0x74,0x5F,0xFF,0xC0,0x9A,0x42,0xCE,0xBD,0xB9,0x10,0x49,0x3D,0xA3,0x1D,0x85,0x3D,0xD5,0x6D,0x81,0xB9,0x8C,0x54,0xDA,0x3C,0xEC,0x6B,0x8B,0x3D,0x46,0x8E,0xA4,0xC0,0xAF,0x46,0x19,0x41,0x8,0xFF,0xE4,0xFE,0x08,0xFF,0x1D,0xFF,0xFF,0xFF,0xFF,0xC2,0xB8,0xBA,0x47,0x1A,0x96,0x92,0xBF,0x84,0x40,0x50,0xBE,0x00,0xF9,0x4E;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x39,0x24,0x3E,0x9D,0x45,0x81,0x59,0xCB,0xC4,0xAC,0x67,0xF6,0xC0,0xEF,0x72,0xA7,0xBD,0xD0,0xD0,0x30,0x3D,0x9D,0xF2,0x46,0x3D,0xD7,0xD0,0x77,0xB9,0xE5,0x33,0x1E,0x3D,0x62,0x62,0x80,0x3D,0xEB,0x5A,0xB7,0xC0,0x26,0x58,0x14,0x41,0x8,0xFF,0x2E,0xFF,0x2D,0xFF,0x35,0xFF,0xFF,0xFF,0xFF,0x24,0xB8,0x70,0x47,0x1C,0x96,0xA4,0xBF,0xB0,0x40,0x20,0xBE,0x00,0xFD,0xFC;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x3A,0x24,0x3E,0x9D,0x45,0x92,0xF9,0xCC,0xC4,0x27,0x9C,0x5,0xC1,0x8A,0x72,0x10,0xBE,0xCF,0x4F,0xB2,0x3D,0x18,0x7C,0xFE,0x3D,0xF8,0x37,0x0A,0xBA,0x68,0x5,0xBF,0x3C,0xEA,0xDA,0x93,0x3D,0xCB,0x0B,0xA7,0xC0,0xFA,0x60,0x1E,0x41,0x10,0xFF,0x3D,0xFF,0xC8,0xFE,0xF8,0xFE,0xFF,0xFF,0xFF,0x12,0xB8,0x14,0x47,0xFE,0x95,0x92,0xBF,0x84,0x40,0x82,0xBE,0x00,0xFD,0x98;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2B,0x3B,0x24,0x3E,0x9D,0x45,0x19,0x9D,0xCE,0xC4,0x69,0xA3,0xF2,0xC0,0x44,0xA0,0xAE,0xBD,0xDE,0xA6,0x59,0x3D,0x9B,0xEA,0x74,0x3D,0xC2,0xC1,0xAF,0xB9,0x37,0x37,0x3A,0x3D,0xC8,0xD2,0x5E,0x3D,0x8C,0x01,0xC8,0xC0,0x0F,0x4,0x9,0x41,0xFD,0xFE,0xC4,0xFE,0xE2,0xFE,0x37,0xFF,0xFF,0xFF,0xFF,0xBF,0xB7,0xAF,0x48,0x10,0x96,0x9D,0xBF,0x7C,0x40,0x68,0xBE,0x00,0xFF,0x0A;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2C,0x00,0x24,0x3E,0x9D,0x45,0xD8,0x5F,0xD0,0xC4,0x45,0x6F,0xF4,0xC0,0xC2,0x32,0xC6,0xBD,0x6,0x80,0x44,0x3D,0x16,0x25,0x91,0x3D,0x0D,0xA5,0x68,0xB9,0xDE,0x2,0x8C,0x3C,0x5A,0x40,0x6B,0x3D,0x95,0xB3,0x8B,0xC0,0xD3,0xA6,0x0A,0x41,0x35,0xFF,0xF1,0xFE,0x15,0xFF,0x35,0xFF,0xFF,0xFF,0xFF,0x61,0xB7,0x4,0x47,0xC4,0x95,0x94,0xBF,0xBC,0x40,0x2F,0xBE,0x0,0xFF,0x79;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2C,0x01,0x24,0x3E,0x9D,0x45,0xDB,0x0D,0xD2,0xC4,0x15,0xF5,0xE3,0xC0,0x57,0xC9,0x94,0xBD,0x57,0x3F,0x23,0x3D,0x5E,0x37,0x37,0x3D,0x6F,0x30,0x23,0xB9,0x57,0xFA,0x74,0x3C,0x33,0x91,0x56,0x3D,0xD2,0x8D,0x6B,0xC0,0x48,0x54,0x5,0x41,0xF2,0xFE,0xD9,0xFE,0xC2,0xFE,0xE8,0xFE,0xFF,0xFF,0xFF,0x54,0xB7,0x28,0x47,0xCC,0x95,0xA0,0xBF,0x89,0x40,0x1F,0xBE,0x00,0xFF,0x34;
            0x4E,0x00,0xDF,0x7,0x1F,0x01,0x14,0x2C,0x2,0x24,0x3E,0x9D,0x45,0xC0,0xC8,0xD3,0xC4,0xEE,0xAB,0xEB,0xC0,0x21,0x85,0xE8,0xBD,0x4B,0x33,0x58,0x3D,0x91,0x32,0xE5,0x3D,0xA4,0x5A,0x3E,0xB9,0x0C,0xBA,0x6F,0x3C,0x34,0x18,0x74,0x3D,0x94,0x2,0x4C,0xC0,0xD4,0x55,0x0B,0x41,0xC4,0xFE,0xBC,0xFE,0xD1,0xFE,0xC4,0xFE,0xFF,0xFF,0xFF,0xB0,0xB7,0x95,0x48,0xFA,0x95,0x7E,0xBF,0x71,0x40,0x82,0xBE,0x00,0xFF,0xAA;
            */

            //            CalculateMarineData CalculateMarineData;

            Newdata.meterBytes = meterData;
            Newdata.GetMeterData();
            UpdateTextBox();
//            System.Threading.Thread.Sleep(5000);
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void UpdateTextBox()
        {

            //   textBox3.TextLength = 5;
            textBox3.Text = Convert.ToString(Math.Round(Newdata.p28V, 3));
            textBox4.Text = Convert.ToString(Math.Round(Newdata.n28V, 3));
            textBox5.Text = Convert.ToString(Math.Round(Newdata.p24V, 3));
            textBox6.Text = Convert.ToString(Math.Round(Newdata.p15V, 3));
            textBox7.Text = Convert.ToString(Math.Round(Newdata.n15V, 3));
            textBox8.Text = Convert.ToString(Math.Round(Newdata.p5V, 3));

            textBoxVCC.Text = Convert.ToString(Math.Round(Newdata.VCC, 3));
            textBoxAL.Text = Convert.ToString(Math.Round(Newdata.AL, 3));
            textBoxAX.Text = Convert.ToString(Math.Round(Newdata.AX, 3));
            textBoxAX2.Text = Convert.ToString(Newdata.AX2);
            textBoxVE.Text = Convert.ToString(Math.Round(Newdata.VE, 3));
            textBoxAX2.Text = Convert.ToString(Math.Round(Newdata.AX2, 3));
            textBoxXACC2.Text = Convert.ToString(Math.Round(Newdata.XACC2, 3));
            textBoxLACC2.Text = Convert.ToString(Math.Round(Newdata.LACC2, 3));
            textBoxLACC.Text = Convert.ToString(Math.Round(Newdata.XACC, 3));
            textBoxXACC.Text = Convert.ToString(Math.Round(Newdata.LACC, 3));

            textBoxAUX1.Text = Convert.ToString(Math.Round(Newdata.AUX1, 3));
            textBoxAUX2.Text = Convert.ToString(Math.Round(Newdata.AUX2, 3));
            textBoxAUX3.Text = Convert.ToString(Math.Round(Newdata.AUX3, 3));
            textBoxAUX4.Text = Convert.ToString(Math.Round(Newdata.AUX4, 3));

//            DGtextBox6.Text = Convert.ToString(Newdata.Beam);
            //           DatetextBox3.Text = Convert.ToString(Newdata.year);
 //           DatetextBox3.Text = Convert.ToString(Newdata.myDT);

            
            richTextBox1.Text = Convert.ToString(Newdata.myDT) +  "         " + Convert.ToString(Newdata.ST) + "             " + Convert.ToString(Newdata.Beam) + "/n/n";
            richTextBox1.Text = Convert.ToString(Newdata.myDT) + "         " + Convert.ToString(Newdata.ST) + "             " + Convert.ToString(Newdata.Beam) + System.Environment.NewLine;


          //  Gravitychart1.Series["Spring Tension"].XValueType = ChartValueType.DateTime;
            Gravitychart1.Series["Spring Tension"].Points.AddXY(DateTime.Now, 12.00m);
            Gravitychart1.Series["Spring Tension"].Points.AddXY(DateTime.Now.AddDays(1), 13m);
            Gravitychart1.Series["Spring Tension"].Points.AddXY(DateTime.Now.AddDays(2), 8m);
            Gravitychart1.Series["Spring Tension"].Points.AddXY(DateTime.Now.AddDays(3), 13m);
            Gravitychart1.Series["Spring Tension"].Points.AddXY(DateTime.Now.AddDays(4), 8);

            // Gravitychart1.ChartAreas[0].AxisX.Interval = 1;
            // Gravitychart1.ChartAreas[0].AxisX.Minimum = 1;
            // Gravitychart1.ChartAreas[0].AxisX.Maximum = 30;
        
        }
    }
}